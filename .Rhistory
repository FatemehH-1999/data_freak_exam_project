summary(here("data", "exam_data_join.txt")) #shows code and result in output
summary(here("data", "exam_data_tidy_2025-09-08.txt")) #shows code and result in output
data <- read_delim(here("data", "exam_data.txt"), delim = "\t")
summary(data) #shows code and result in output
glimpse(data) #shows code and result in output
data <- read_delim(here("data", "exam_data.txt"), delim = "\t")
glimpse(data) #shows code and result in output
head(data) #shows code and result in output
head(data, n = 1L) #shows code and result in output
data <- read_delim(here("data", "exam_data.txt"), delim = "\t")
list(data) #shows code and result in output
head(data, n = 0L) #shows code and result in output
head(data, n = 1L) #shows code and result in output
head(data, n = 1L, width = 1) #shows code and result in output
head(data, n = 1L) #shows code and result in output
head(data, n = 1L, hight = 1) #shows code and result in output
data_tidy <- read_delim(here("data", "exam_data_tidy_2025-09-08.txt"), delim = " ")
data_tidier <- read_delim(here("data", "exam_data_tidier_2025-09-09.txt"), delim = " ")
data_join <- read_delim(here("data", "exam_data_join.txt"), delim = "\t")
```{r data_tidy, echo=FALSE}
View(data_tidier)
View(data_tidier)
###getting every ID/person tested 50 days after pandemic start and sort after "pan_day"
data1 <- read_delim(here("data", "exam_data_tidy_2025-09-08.txt"), delim = " ")
data_stratified_panday <- data1 %>%
filter(pan_day > 50) %>%
arrange(pan_day)
###calculating and outputting min, max, mean and sd of column "age" after grouping by day after pandemic (pan_day)
####for each day after start of pandemic
age_stratified_after_panday_each <- data_stratified_panday %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
View(data_stratified_panday)
View(age_stratified_after_panday_each)
####for all days after pandemic combined
age_stratified_after_panday_total <- data1 %>%
filter(pan_day > 50) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
View(age_stratified_after_panday_total)
###calculating and outputting min, max, mean and sd of column "age" after grouping by day after pandemic (pan_day)
####for each day after start of pandemic
age_stratified_after_panday_each <- data_stratified_panday %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
age_stratified_after_panday_each <- data_tidier %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
data_stratified_panday <- data1 %>%
filter(pan_day > 50) %>%
arrange(pan_day)
###calculating and outputting min, max, mean and sd of column "age" after grouping by day after pandemic (pan_day)
####for each day after start of pandemic
age_stratified_after_panday_each <- data_stratified_panday %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
age_stratified_after_panday_each <- data_tidier %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
age_stratified_after_panday_each <- data_tidier %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_each, n = 1L)
head(age_stratified_after_panday_each, n = 6L)
age_stratified_after_panday_total <- data1 %>%
filter(pan_day > 50) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total, n = 1L)
age_stratified_after_panday_each <- data_tidier %>%
filter(pan_day > 50) %>%
group_by(pan_day) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_each, n = 4L)
age_stratified_after_ctresult_total <- data_tidier %>%
filter(ct_result == 45) %>%
group_by(ct_result) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total, n = 1L)
data_tidier %>%
filter(ct_result == 45) %>%
group_by(ct_result) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total, n = 1L)
age_stratified_after_ctresult_total <- data_tidier %>%
filter(ct_result == 45) %>%
group_by(ct_result) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total)
age_stratified_after_panday_total <- data_tidier %>%
filter(pan_day > 50) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total)
data_tidier %>%
filter(pan_day > 50) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total)
data_tidier %>%
filter(ct_result == 45) %>%
group_by(ct_result) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total)
data_tidier <- read_delim(here("data", "exam_data_tidier_2025-09-09.txt"), delim = " ")
data_tidier %>%
filter(ct_result == 45) %>%
group_by(ct_result) %>%
summarise(n = n(),
min = min(age),
max = max(age),
mean = mean(age),
sd = sd(age))
head(age_stratified_after_panday_total)
age_stratified_after_patient_class_total <- data_tidier %>%
filter(patient_class == "inpatient") %>%
group_by(gender) %>%
summarise(
min_value  = min(pan_day,na.rm = TRUE),
max_value  = max(pan_day,na.rm = TRUE),
mean_value = mean(pan_day,na.rm = TRUE),
sd_value   = sd(pan_day,na.rm = TRUE),
.groups = "drop"
)
age_stratified_after_patient_class_total <- data_tidier %>%
filter(patient_class == "inpatient") %>%
group_by(gender) %>%
summarise(
min_value  = min(pan_day,na.rm = TRUE),
max_value  = max(pan_day,na.rm = TRUE),
mean_value = mean(pan_day,na.rm = TRUE),
sd_value   = sd(pan_day,na.rm = TRUE),
.groups = "drop"
)
head(age_stratified_after_patient_class_total)
data <- data_tidier %>%
select(-c(ID))
x <- (ggcorr(
data,
method = c("complete.obs", "pearson"),
name = "Legend",
geom = "circle",
max_size = 10,
min_size = 1,
nbreaks = 6,
size = 2.5,
hjust = 0.75,
angle = 0,
palette = "RdBu"
))
x
data <- data_tidier %>%
select(-c(ID))
x <- (ggcorr(
data,
method = c("complete.obs", "pearson"),
name = "Legend",
geom = "circle",
max_size = 10,
min_size = 1,
nbreaks = 6,
size = 2.5,
hjust = 0.75,
angle = 0,
palette = "RdBu"
))
x
###Pratik----
###Does the time spent waiting for the test result improve during these 100 days that the dataset includes?----
####need to find correlation between rec_ver_tat and pan_day
####I cannot find improvement and the correlation matrix shows almost no correlation (r=0.01)
data %>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data <- data_tidier%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data <- data_tidier%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data <- data_tidier%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data_tidier%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data <- data_tidier%>%
ggplot(aes(x = pan_day, y = rec_ver_tat)) +
geom_point(alpha = 0.4, color = "steelblue") +     # scatterplot of points
geom_smooth(method = "loess", se = TRUE, color = "red") +  # smooth trend line
labs(
title = "Change in waiting time for test results over 100 days",
x = "Day after start of pandemic",
y = "Waiting time (receive → verification)"
) +
theme_minimal()
data_tidier %>%
with(table(gender, drive_thru_ind))
data %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
data_tidier %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
data_tidy %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
data_tidier %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
####Yes, there were more females (n=3997) than males (n=3912)
data %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
###Were there more females than males that took the test at a drive through?----
data %>%
with(table(gender, drive_thru_ind))
##loading post-tidied data set----
data <- read_delim(here("data", "exam_data_tidier_2025-09-09.txt"), delim = " ")
###Were there more females than males that took the test at a drive through?----
data %>%
with(table(gender, drive_thru_ind))
####Yes, there were more females (n=3997) than males (n=3912)
data %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
####Yes, there were more females (n=3997) than males (n=3912)
data %>%
filter(drive_thru_ind == 1) %>%              # keep only drive-through tests
ggplot(aes(x = gender, fill = gender)) +     # gender on x-axis
geom_bar() +                                 # bar plot of counts
labs(
title = "Drive-through tests by gender",
x = "Gender",
y = "Number of tests at drive thru"
) +
theme_minimal() +
theme(legend.position = "none")     # remove legend (optional)
ggplot(data, aes(x = gender, y = ct_result, fill = gender)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "Violin plot of ct_result by gender",
x = "gender",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = ct_result, colour = gender, fill = gender)) +
geom_density(alpha = 0.4) +
labs(title = "Density of ct_result by gender",
x = "ct_result",
y = "Density") +
theme_minimal()
```{r plot2_F, echo=FALSE}
ggplot(data, aes(x = ct_result, colour = gender, fill = gender)) +
geom_density(alpha = 0.4) +
labs(title = "Density of ct_result by gender",
x = "ct_result",
y = "Density") +
theme_minimal()
```{r plot2_S, echo=FALSE}
ggplot(data, aes(y = payor_group, x = ct_result, fill = payor_group, height = after_stat(density))) +
geom_density_ridges(scale = 2, stat = "density") +
scale_y_discrete(expand = c(0.01, 0)) +
theme_ridges() +
labs(title = "Ridgeline chart of CT results grouped by health care category",
x = "ct results",
y = "") +
theme(legend.position = "none") +
xlim(15, 50)
ggplot(data, aes(y = payor_group, x = ct_result, fill = payor_group, height = after_stat(density))) +
geom_density_ridges(scale = 2, stat = "density") +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0.01, 0)) +
theme_ridges() +
labs(title = "Ridgeline chart of CT results grouped by health care category",
x = "ct results",
y = "") +
theme(legend.position = "none") +
xlim(15, 50)
ggplot(data, aes(y = payor_group, x = ct_result, fill = payor_group, height = after_stat(density))) +
geom_density_ridges(scale = 2, stat = "density") +
scale_y_discrete(expand = c(0.01, 0)) +
theme_ridges() +
labs(title = "Ridgeline chart of CT results grouped by health care category",
x = "ct results",
y = "") +
theme(legend.position = "none") +
xlim(15, 50)
ggplot(data, aes(y = payor_group, x = ct_result, fill = payor_group, height = after_stat(density))) +
geom_density_ridges(scale = 2, stat = "density") +
scale_y_discrete(expand = c(0.01, 0)) +
theme_ridges() +
labs(title = "Ridgeline chart of CT results grouped by health care category",
x = "ct results",
y = "") +
theme(legend.position = "none")
ggplot(data, aes(y = payor_group, x = ct_result, fill = payor_group, height = after_stat(density))) +
geom_density_ridges(scale = 2, stat = "density") +
scale_y_discrete(expand = c(0.01, 0)) +
theme_ridges() +
labs(title = "Ridgeline chart of CT results grouped by health care category",
x = "ct results",
y = "") +
theme(legend.position = "none") +
xlim(10, 50)
data %>%
with(table(result, drive_thru_ind))
data %>%
with(prop.table(table(result, drive_thru_ind)))
ggplot(data, aes(x = result, y = ct_result, fill = result)) +
geom_boxplot(alpha = 0.7, outlier.color = "red") +
labs(title = "Distribution of ct_result across outcome groups",
x = "Outcome group (result)",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
####Violin plot – show full distribution shape
ggplot(data, aes(x = result, y = ct_result, fill = result)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, fill = "white") +
labs(title = "Violin plot of ct_result by outcome group",
x = "Outcome group (result)",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = result, y = ct_result, fill = result)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, fill = "white") +
labs(title = "Violin plot of ct_result by outcome group",
x = "Outcome group (result)",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = result, y = ct_result, fill = result)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, fill = "white") +
labs(title = "Violin plot of ct_result by outcome group",
x = "Outcome group (result)",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = result, y = ct_result, fill = result)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, fill = "white") +
labs(title = "Violin plot of ct_result by outcome group",
x = "Outcome group (result)",
y = "ct_result") +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = result, y = age, fill = result)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_boxplot(width = 0.2, fill = "white") +
labs(title = "Violin plot representing the age distribution of a corona test result",
x = "",
y = "age") +
theme_minimal() +
theme(legend.position = "none")
